package com.next_step_be.next_step_be.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.next_step_be.next_step_be.domain.Role;
import com.next_step_be.next_step_be.domain.User;
import com.next_step_be.next_step_be.dto.LoginRequest;
import com.next_step_be.next_step_be.dto.RegisterRequest;
import com.next_step_be.next_step_be.dto.TokenResponse;
import com.next_step_be.next_step_be.dto.UserCacheDto;
import com.next_step_be.next_step_be.jwt.JwtTokenProvider;
import com.next_step_be.next_step_be.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.concurrent.TimeUnit;

@Slf4j
@Service
public class AuthService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtTokenProvider jwtTokenProvider;
    private final AuthenticationManager authenticationManager;
    private final RedisTemplate<String, String> redisTemplate;
    private final ObjectMapper objectMapper = new ObjectMapper(); // JSON Î≥ÄÌôòÍ∏∞

    public AuthService(
            UserRepository userRepository,
            PasswordEncoder passwordEncoder,
            JwtTokenProvider jwtTokenProvider,
            AuthenticationManager authenticationManager,
            @Qualifier("redisTemplate") RedisTemplate<String, String> redisTemplate) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        this.jwtTokenProvider = jwtTokenProvider;
        this.authenticationManager = authenticationManager;
        this.redisTemplate = redisTemplate;
    }

    @Transactional
    public User register(RegisterRequest request) {
        if (userRepository.existsByUsername(request.getUsername())) {
            throw new IllegalArgumentException("Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏûÖÎãàÎã§.");
        }

        long userCount = userRepository.count();
        String generatedNickname = "user" + (userCount + 1);

        User user = User.builder()
        	    .username(request.getUsername())
        	    .password(passwordEncoder.encode(request.getPassword()))
        	    .role(Role.USER)
        	    .nickname(generatedNickname)
        	    .profileImageUrl("https://storage.googleapis.com/next-step-assets/uploads/default.png") // Í∏∞Î≥∏Í∞í (ÎòêÎäî default Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°ú)
        	    .build();

        return userRepository.save(user);
    }

    @Transactional
    public TokenResponse login(LoginRequest request) {
        UsernamePasswordAuthenticationToken authenticationToken =
                new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword());

        Authentication authentication = authenticationManager.authenticate(authenticationToken);

        String accessToken = jwtTokenProvider.generateToken(authentication, false);
        String refreshToken = jwtTokenProvider.generateToken(authentication, true);
        long refreshTokenExpirationMillis = jwtTokenProvider.getRefreshTokenExpiration();

        // üîπ RefreshToken Redis Ï†ÄÏû•
        String refreshKey = "refresh:" + authentication.getName();
        redisTemplate.opsForValue().set(refreshKey, refreshToken, refreshTokenExpirationMillis, TimeUnit.MILLISECONDS);

        // üîπ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Redis Ï∫êÏã± (7Ïùº Í≥†Ï†ï TTL)
        User user = userRepository.findByUsername(request.getUsername())
                .orElseThrow(() -> new IllegalArgumentException("ÏÇ¨Ïö©Ïûê ÏóÜÏùå"));

        UserCacheDto userCache = new UserCacheDto(
        	    user.getUsername(),
        	    user.getNickname(),
        	    user.getRole(),
        	    user.getProfileImageUrl()
        	);

        String userKey = "user:" + user.getUsername();
        redisTemplate.opsForValue().set(userKey, toJson(userCache), 7, TimeUnit.DAYS);

        return new TokenResponse(accessToken, refreshToken);
    }

    @Transactional // Redis ÏûëÏóÖ Ïô∏Ïóê DB ÏûëÏóÖÏù¥ ÏóÜÎã§Î©¥ ÌïÑÏàòÎäî ÏïÑÎãò
    public TokenResponse refreshAccessToken(String oldRefreshToken) {
        // 1. Í∏∞Ï°¥ Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ (ÏÑúÎ™Ö, ÎßåÎ£å Ïó¨Î∂Ä)
        if (!jwtTokenProvider.validateToken(oldRefreshToken)) {
            throw new IllegalArgumentException("Ïú†Ìö®ÌïòÏßÄ ÏïäÍ±∞ÎÇò ÎßåÎ£åÎêú Refresh TokenÏûÖÎãàÎã§.");
        }

        String username = jwtTokenProvider.getUsernameFromToken(oldRefreshToken);
        String refreshKey = "refresh:" + username;
        String storedRefreshToken = redisTemplate.opsForValue().get(refreshKey);

        // 2. RedisÏóê Ï†ÄÏû•Îêú ÌÜ†ÌÅ∞Í≥º ÏùºÏπòÌïòÎäîÏßÄ ÌôïÏù∏ (ÌÉàÏ∑®/Ïû¨ÏÇ¨Ïö© Î∞©ÏßÄ)
        if (storedRefreshToken == null || !storedRefreshToken.equals(oldRefreshToken)) {
            if (storedRefreshToken != null) { // Î∂àÏùºÏπòÌïòÎäî ÌÜ†ÌÅ∞Ïù¥ RedisÏóê ÏûàÎã§Î©¥ ÏÇ≠Ï†úÌïòÏó¨ Ï∂îÍ∞Ä Ïû¨ÏÇ¨Ïö© Î∞©ÏßÄ
                redisTemplate.delete(refreshKey);
                log.warn("Refresh Token Î∂àÏùºÏπò Í∞êÏßÄ. Redis ÌÜ†ÌÅ∞ ÏÇ≠Ï†ú: {}", username);
            } else {
                 log.warn("Ï†ÄÏû•Îêú Refresh Token ÏóÜÏùå. Ïû¨Î°úÍ∑∏Ïù∏ ÌïÑÏöî: {}", username);
            }
            throw new IllegalArgumentException("Refresh TokenÏù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÍ±∞ÎÇò Ïù¥ÎØ∏ ÏÇ¨Ïö©ÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.");
        }

        // 3. Í∏∞Ï°¥ Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ Î¨¥Ìö®Ìôî (RedisÏóêÏÑú ÏÇ≠Ï†ú)
        redisTemplate.delete(refreshKey); 
        log.info("Í∏∞Ï°¥ Refresh Token Î¨¥Ìö®Ìôî ÏôÑÎ£å: {}", username);

        // 4. ÏÉàÎ°úÏö¥ Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Î∞è Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ Î∞úÍ∏â
        Authentication authentication = jwtTokenProvider.getAuthentication(oldRefreshToken);
        String newAccessToken = jwtTokenProvider.generateToken(authentication, false);
        String newRefreshToken = jwtTokenProvider.generateToken(authentication, true);
        long newRefreshTokenExpirationMillis = jwtTokenProvider.getRefreshTokenExpiration();

        // 5. ÏÉàÎ°úÏö¥ Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ Redis Ï†ÄÏû•
        redisTemplate.opsForValue().set(refreshKey, newRefreshToken, newRefreshTokenExpirationMillis, TimeUnit.MILLISECONDS);
        log.info("ÏÉà AccessToken Î∞è RefreshToken Ïû¨Î∞úÍ∏â ÏôÑÎ£å - user: {}", username);

        // 6. ÏÉàÎ°úÏö¥ ÌÜ†ÌÅ∞Îì§ Î∞òÌôò
        return new TokenResponse(newAccessToken, newRefreshToken);
    }

    public boolean logout(String accessToken, String refreshToken) {
        String username = jwtTokenProvider.getUsernameFromToken(accessToken);

        // üîß Key Ïù¥Î¶Ñ ÏùºÏπòÌôî
        String refreshKey = "refresh:" + username;
        if (redisTemplate.hasKey(refreshKey)) {
            redisTemplate.delete(refreshKey);
        } else {
            return false;
        }

        Long expiration = jwtTokenProvider.getExpiration(accessToken);
        if (expiration != null && expiration > 0) {
            redisTemplate.opsForValue().set(accessToken, "logout", expiration, TimeUnit.MILLISECONDS);
        }

        // ÏÇ¨Ïö©Ïûê Ï∫êÏãú ÏÇ≠Ï†ú (ÏÑ†ÌÉù ÏÇ¨Ìï≠)
        redisTemplate.delete("user:" + username);

        return true;
    }

    public long getRefreshTokenExpiration() {
        return jwtTokenProvider.getRefreshTokenExpiration();
    }

    // JSON Î≥ÄÌôò Ìó¨Ìçº
    private String toJson(Object obj) {
        try {
            return objectMapper.writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException("JSON ÏßÅÎ†¨Ìôî Ïã§Ìå®", e);
        }
    }
}
