name: Deploy Spring Boot Backend to GCP VM

on:
    push:
        branches:
            - main # main 브랜치에 push될 때 워크플로우 실행

env:
    PROJECT_ID: next-step # ⭐ GCP 프로젝트 ID. 이미지에서 확인된 프로젝트 이름입니다.
    GCR_HOSTNAME: gcr.io
    IMAGE_NAME: spring-boot-backend # ⭐ Docker 이미지 이름 (예: my-api-server)
    VM_INSTANCE_NAME: next-step-backend # ⭐ 배포할 VM 인스턴스 이름
    VM_ZONE: asia-northeast3 # ⭐ VM이 위치한 Zone으로 변경 (예: asia-northeast3-a). VM 인스턴스 목록에서 확인 필요.
    VM_USER: nextstep9898 # ⭐ VM에 접속할 사용자 이름. SSH 접속 시의 사용자 이름.

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest # 워크플로우를 실행할 가상 환경

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: "17"
                  distribution: "temurin"
                  cache: "gradle" # 또는 'maven'

            - name: Build with Gradle # Gradle 사용 시
              run: |
                  chmod +x gradlew # gradlew 실행 권한 부여
                  ./gradlew clean bootJar # bootJar 태스크로 실행 가능한 JAR 빌드

            # - name: Build with Maven # Maven 사용 시 (Gradle 대신 사용)
            #   run: mvn clean package -DskipTests # 테스트 건너뛰기

            - name: Authenticate to GCP
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_SA_KEY }}

            - name: Set up Cloud SDK
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ env.PROJECT_ID }}

            - name: Configure Docker to use gcloud as a credential helper
              run: gcloud auth configure-docker ${GCR_HOSTNAME}

            - name: Build & Push Docker image
              run: |
                  docker build -t ${GCR_HOSTNAME}/${PROJECT_ID}/${IMAGE_NAME}:latest .
                  docker push ${GCR_HOSTNAME}/${PROJECT_ID}/${IMAGE_NAME}:latest

            - name: Deploy to GCP VM
              uses: google-github-actions/ssh-and-scp@v2 # ⭐ v1을 v2로 변경합니다.
              with:
                  # SSH 접속을 위한 키. GitHub Actions에서 SSH 키를 생성하여 Secret으로 저장할 수도 있지만,
                  # GCP 서비스 계정으로 접속하는 것이 더 일반적입니다.
                  # 이 경우 VM에 GCP 서비스 계정 SSH 키가 등록되어 있어야 합니다.
                  # 또는 gcloud compute ssh 명령을 사용 (아래 주석 처리된 부분 참조)
                  cmd: |
                      # VM 인스턴스에 접속하여 Docker 컨테이너 업데이트 명령 실행
                      # 1. 기존 컨테이너 종료 (선택 사항: graceful shutdown 로직 추가 가능)
                      sudo docker stop ${IMAGE_NAME} || true # ⭐ sudo 추가
                      sudo docker rm ${IMAGE_NAME} || true   # ⭐ sudo 추가

                      # 2. 최신 Docker 이미지 pull
                      sudo docker pull ${GCR_HOSTNAME}/${PROJECT_ID}/${IMAGE_NAME}:latest # ⭐ sudo 추가

                      # 3. 새 컨테이너 실행
                      sudo docker run -d --name ${IMAGE_NAME} -p 8080:8080 ${GCR_HOSTNAME}/${PROJECT_ID}/${IMAGE_NAME}:latest # ⭐ sudo 추가
                      # -p 8080:8080은 VM의 8080포트를 컨테이너의 8080포트에 매핑합니다.
                      # VM의 특정 포트(예: 80)로 외부 접근을 허용하고 싶다면 -p 80:8080으로 변경하고 Nginx 리버스 프록시 설정

                      echo "Deployment successful for ${IMAGE_NAME}"

              # --- SSH_AND_SCP 대신 gcloud compute ssh 명령을 사용하는 경우 (대체 옵션, 권장) ---
              # 이 방법을 사용하면 VM에 SSH 키를 수동으로 등록할 필요 없이,
              # 서비스 계정이 VM에 대한 권한만 있으면 gcloud가 알아서 SSH 접속을 관리합니다.
              # 따라서 일반적으로 이 방법을 더 권장합니다.
              # 이 블록을 사용하려면 위에 있는 'Deploy to GCP VM' 스텝을 주석 처리하거나 제거해야 합니다.
            - name: Deploy to GCP VM using gcloud SSH
              run: |
                  gcloud compute ssh ${VM_USER}@${VM_INSTANCE_NAME} --project=${PROJECT_ID} --zone=${VM_ZONE} --command="\
                    sudo docker stop ${IMAGE_NAME} || true && \
                    sudo docker rm ${IMAGE_NAME} || true && \
                    sudo docker pull ${GCR_HOSTNAME}/${PROJECT_ID}/${IMAGE_NAME}:latest && \
                    sudo docker run -d --name ${IMAGE_NAME} -p 8080:8080 ${GCR_HOSTNAME}/${PROJECT_ID}/${IMAGE_NAME}:latest \
                  "
              # gcloud compute ssh를 사용하려면 VM 인스턴스가 `Compute 인스턴스 Admin` 역할이 부여된 서비스 계정으로 실행되거나,
              # 해당 서비스 계정이 SSH 접속 권한이 있어야 합니다.
              # VM_ZONE은 반드시 인스턴스가 위치한 정확한 Zone (예: asia-northeast3-a)을 지정해야 합니다.
